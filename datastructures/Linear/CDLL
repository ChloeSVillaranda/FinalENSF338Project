class DNode:
    def __init__(self, data):
        self.data = data
        self.next = None
        self.prev = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None
        self.size = 0

    def __len__(self):
        return self.size

    def is_empty(self):
        return self.size == 0

    def insert_head(self, node):
        if self.is_empty():
            node.next = None
            node.prev = None
            self.head = node
            self.tail = node
        else:
            node.next = self.head
            node.prev = None
            self.head.prev = node
            self.head = node
        self.size += 1

    def insert_tail(self, node):
        if self.is_empty():
            node.next = None
            node.prev = None
            self.head = node
            self.tail = node
        else:
            node.next = None
            node.prev = self.tail
            self.tail.next = node
            self.tail = node
        self.size += 1

    def insert(self, node, position):
        if position < 0 or position > self.size:
            raise IndexError("DoublyLinkedList index out of range")
        elif position == 0:
            self.insert_head(node)
        elif position == self.size:
            self.insert_tail(node)
        else:
            curr = self.head
            for i in range(position - 1):
                curr = curr.next
            node.next = curr.next
            node.prev = curr
            curr.next.prev = node
            curr.next = node
            self.size += 1

    def delete_head(self):
        if self.is_empty():
            raise ValueError("DoublyLinkedList is empty")
        elif self.size == 1:
            self.head = None
            self.tail = None
        else:
            self.head.next.prev = None
            self.head = self.head.next
        self.size -= 1

    def delete_tail(self):
        if self.is_empty():
            raise ValueError("DoublyLinkedList is empty")
        elif self.size == 1:
            self.head = None
            self.tail = None
        else:
            self.tail.prev.next = None
            self.tail = self.tail.prev
        self.size -= 1

    def delete(self, node):
        if self.is_empty():
            raise ValueError("DoublyLinkedList is empty")
        elif self.size == 1:
            if self.head != node:
                raise ValueError("DoublyLinkedList node not found")
            else:
                self.head = None
                self.tail = None
        else:
            if node == self.head:
                self.head = node.next
                node.next.prev = None
            elif node == self.tail:
                self.tail = node.prev
                node.prev.next = None
            else:
                node.prev.next = node.next
                node.next.prev = node.prev
        self.size -= 1

    def clear(self):
        self.head = None
        self.tail = None
        self.size = 0

    def print_list(self):
        if self.is_empty():
            print("DoublyLinkedList is empty")
        else:
            print(f"DoublyLinkedList length: {self.size}")
            curr = self.head
            while curr:
                print(curr.data)
                curr = curr.next

class CircularDoublyLinkedList(DoublyLinkedList):
    def __init__(self):
        super().__init__()
        self.head = DNode(None)
       
