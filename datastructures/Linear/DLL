class DoublyLinkedList:
    def __init__(self, head=None):
        self.head = head
        self.tail = head
        self.size = 0
        if head:
            self.size = 1
            head.prev = None
            head.next = None

    def insert_head(self, node):
        if not self.head:
            self.head = node
            self.tail = node
            node.prev = None
            node.next = None
        else:
            node.next = self.head
            self.head.prev = node
            self.head = node
            node.prev = None
        self.size += 1

    def insert_tail(self, node):
        if not self.head:
            self.insert_head(node)
        else:
            node.prev = self.tail
            self.tail.next = node
            self.tail = node
            node.next = None
            self.size += 1

    def insert(self, node, position):
        if position < 0 or position > self.size:
            raise IndexError("List index out of range")
        elif position == 0:
            self.insert_head(node)
        elif position == self.size:
            self.insert_tail(node)
        else:
            current = self.head
            for i in range(position):
                current = current.next
            node.next = current
            node.prev = current.prev
            current.prev.next = node
            current.prev = node
            self.size += 1

    def sorted_insert(self, node):
        if not self.head:
            self.insert_head(node)
        else:
            current = self.head
            while current and current.data < node.data:
                current = current.next
            if current == self.head:
                self.insert_head(node)
            elif current == None:
                self.insert_tail(node)
            else:
                node.prev = current.prev
                node.next = current
                current.prev.next = node
                current.prev = node
                self.size += 1

    def search(self, node):
        current = self.head
        while current:
            if current.data == node.data:
                return current
            current = current.next
        return None

    def delete_head(self):
        if not self.head:
            raise IndexError("List is empty")
        else:
            node = self.head
            self.head = node.next
            if self.head:
                self.head.prev = None
            else:
                self.tail = None
            self.size -= 1
            return node

    def delete_tail(self):
        if not self.head:
            raise IndexError("List is empty")
        else:
            node = self.tail
            self.tail = node.prev
            if self.tail:
                self.tail.next = None
            else:
                self.head = None
            self.size -= 1
            return node

    def delete(self, node):
        if not self.head:
            raise IndexError("List is empty")
        else:
            current = self.head
            while current and current != node:
                current = current.next
            if not current:
                raise ValueError("Node not found")
            elif current == self.head:
                self.delete_head()
            elif current == self.tail:
                self.delete_tail()
            else:
                current.prev.next = current.next
                current.next.prev = current.prev
                self.size -= 1

    def sort(self):
        for i in range(1, self.size):
            current = self.head
            for j in range(i):
                current
